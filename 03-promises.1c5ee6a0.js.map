{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAASC,SAASC,cAAc,SAUtC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,IAC3BC,YAAW,IAAMN,EACbI,EAAQ,C,SAAEN,E,MAAUC,IACpBM,EAAO,C,SAAEP,E,MAAUC,KACrBA,I,CAgBN,SAASQ,EAASC,EAAGC,GACnB,MAAMC,EAAW,IAAIC,SAASF,GACxBG,EAAiB,GAEvBJ,EAAEK,iBACF,IAAK,MAAMC,KAAQJ,EAASK,UAC1BH,EAAeE,EAAK,IAAME,SAASF,EAAK,KArC5C,UAAuBf,MAAEA,EAAKkB,KAAEA,EAAIC,OAAEA,IACpC,OAAInB,EAAQ,GAAKkB,EAAO,GAAKC,EAAS,C,CAuClCC,CAAcP,GArBpB,UAA6Bb,MAAAqB,EAAKH,KAAEA,EAAIC,OAAEA,IACxC,IAAK,IAAIG,EAAQ,EAAGA,EAAQH,EAAQG,IAClCxB,EAAcwB,EAAQ,EAAGD,EAAQH,EAAOI,GACrCC,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBwB,EAAA/B,GAASgC,OAAOC,QAAQ,qBAAqB3B,QAAeC,MAAU,IAEvE2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBwB,EAAA/B,GAASgC,OAAOG,QAAQ,oBAAoB7B,QAAeC,MAAU,G,CAmB3E6B,CAAkBhB,GAJhBW,EAAA/B,GAASgC,OAAOG,QAAQ,4B,CAO5BjC,EAAOmC,iBAAiB,UAAWrB,GAAMD,EAASC,EAAGd","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst formEl = document.querySelector('.form');\n\nfunction isValidFields({ delay, step, amount }) {\n  if (delay < 0 || step < 0 || amount < 1) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) =>\n    setTimeout(() => shouldResolve\n      ? resolve({ position, delay })\n      : reject({ position, delay }),\n      delay)\n  );\n}\n\nfunction generatorPromises({ delay, step, amount }) {\n  for (let index = 0; index < amount; index++) {\n    createPromise(index + 1, delay + step * index)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction onSubmit(e, formEl) {\n  const formData = new FormData(formEl);\n  const configPromises = {};\n\n  e.preventDefault();\n  for (const pair of formData.entries()) {\n    configPromises[pair[0]] = parseInt(pair[1]);\n  }\n\n  if (isValidFields(configPromises)) {\n    Notiflix.Notify.failure('Please enter correct data');\n    return;\n  }\n\n  generatorPromises(configPromises);\n}\n\nformEl.addEventListener('submit', (e) => onSubmit(e, formEl));"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$47d4ff9957288465$var$onSubmit","e","formEl1","formData","FormData","configPromises","preventDefault","pair","entries","parseInt","step","amount","$47d4ff9957288465$var$isValidFields","delay1","index","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$generatorPromises","addEventListener"],"version":3,"file":"03-promises.1c5ee6a0.js.map"}